---
title: "Hands-on Exercise 2"
author: "Sathvika Subramanian"
date: "January 23, 2025"
date-modified: "last-modified"
---

# 1. Getting Started

## 1.1 Installing and loading the required libraries

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

## 1.2 Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

1.  Year end examination grades of a cohort of primary 3 students from a local school.

2.  There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

3.  The categorical attributes are: ID, CLASS, GENDER and RACE. The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# 2. Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

```{r setup, warning=FALSE, message=FALSE}
#| code-fold: show

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

We simply replace geom_label() by geom_label_repel to repel overlapping text.

```{r warning=FALSE, message=FALSE}
#| code-fold: show

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

# 3. Beyond ggplot2 Themes

Theme gray

```{r}
#| code-fold: show

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="blue", 
                 fill="light blue") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

## 3.1 Working with ggtheme package

The Economist theme

```{r}
#| code-fold: show

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="blue", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

Wall Street Journal theme

```{r}
#| code-fold: show

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_wsj(base_size = 10) 
```

## 3.2 Working with hrbthems package

hrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r warning=FALSE, message=FALSE}
#| code-fold: show

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

This code works on changing the font sizes of x and y-axis.

```{r warning=FALSE, message=FALSE}
#| code-fold: show

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

1)  axis_title_size argument is used to increase the font size of the axis title to 18,
2)  base_size argument is used to increase the default axis label to 15, and
3)  grid argument is used to remove the x-axis grid lines.

# 4. Beyond Single Graph

p1 - graph of distribution of maths scores

```{r}
#| code-fold: show

p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p1
```

p2 - graph of distribution of english scores

```{r}
#| code-fold: show

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p2
```

Given the above two graphs a third graph p3 is constructed which is a scatterplot for English score versus Maths score as shown below

```{r warning=FALSE, message=FALSE}
#| code-fold: show

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

p3
```

## 4.1 Creating Composite Graphics: pathwork methods

ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines: Two-Column Layout using the Plus Sign +. Parenthesis () to create a subplot group. Two-Row Layout using the Division Sign /

The above graph p1, p2 and p3 is used

## 4.2 Combining two ggplot2 graphs

```{r}
p1 + p2
```

## 4.3 Combining three ggplot2 graphs

```{r warning=FALSE, message=FALSE}
(p1 / p2) | p3
```

The composite figure above is plotted by using: “/” operator to stack two ggplot2 graphs, “\|” operator to place the plots beside each other, “()” operator the define the sequence of the plotting.

To modify everything at once patchwork provides two additional operators that facilitates this. & will add the element to all subplots in the patchwork.

```{r warning=FALSE, message=FALSE}
patchwork <- p3 / (p1 | p2)
patchwork & theme_minimal()
```

-   will add the element to all the subplots in the current nesting level.

```{r warning=FALSE, message=FALSE}
patchwork * theme_minimal()
```

## 4.4 Creating a composite figure with tag

In order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figures below.

```{r warning=FALSE, message=FALSE}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'A')
```

```{r warning=FALSE, message=FALSE}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## 4.5 Creating figure with insert

With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.

```{r warning=FALSE, message=FALSE}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## 4.6 Creating a composite figure by using patchwork and ggtheme

Created by combining patchwork and theme_economist() of ggthemes package.

```{r warning=FALSE, message=FALSE}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

Created by combining patchwork and theme_classic() of ggthemes package.

```{r warning=FALSE, message=FALSE}
patchwork <- (p1 / p2) | p3
patchwork & theme_classic(base_size = 8)
```
